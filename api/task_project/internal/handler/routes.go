// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2

package handler

import (
	"net/http"

	auth "task_Project/api/task_project/internal/handler/auth"
	company "task_Project/api/task_project/internal/handler/company"
	department "task_Project/api/task_project/internal/handler/department"
	dispatch "task_Project/api/task_project/internal/handler/dispatch"
	handover "task_Project/api/task_project/internal/handler/handover"
	notification "task_Project/api/task_project/internal/handler/notification"
	schedule "task_Project/api/task_project/internal/handler/schedule"
	task "task_Project/api/task_project/internal/handler/task"
	user "task_Project/api/task_project/internal/handler/user"
	"task_Project/api/task_project/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 申请加入企业
				Method:  http.MethodPost,
				Path:    "/joinCompany",
				Handler: auth.CompanyJoinHandler(serverCtx),
			},
			{
				// 审批加入企业申请
				Method:  http.MethodPost,
				Path:    "/joinCompany/approval",
				Handler: auth.CompanyJoinApprovalHandler(serverCtx),
			},
			{
				// 用户登录
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				// 注册并创建账号
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建企业
				Method:  http.MethodPost,
				Path:    "/",
				Handler: company.CompanyCreateHandler(serverCtx),
			},
			{
				// 修改企业信息/状态
				Method:  http.MethodPut,
				Path:    "/",
				Handler: company.CompanyUpdateHandler(serverCtx),
			},
			{
				// 注销企业
				Method:  http.MethodDelete,
				Path:    "/",
				Handler: company.CompanyCancelHandler(serverCtx),
			},
			{
				// 企业列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: company.CompanyListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.true.AccessSecret),
		rest.WithPrefix("/api/v1/company"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建部门
				Method:  http.MethodPost,
				Path:    "/",
				Handler: department.DepartmentCreateHandler(serverCtx),
			},
			{
				// 修改部门
				Method:  http.MethodPut,
				Path:    "/",
				Handler: department.DepartmentUpdateHandler(serverCtx),
			},
			{
				// 删除部门
				Method:  http.MethodDelete,
				Path:    "/",
				Handler: department.DepartmentDeleteHandler(serverCtx),
			},
			{
				// 部门列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: department.DepartmentListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.true.AccessSecret),
		rest.WithPrefix("/api/v1/department"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 自动派发执行
				Method:  http.MethodPost,
				Path:    "/",
				Handler: dispatch.DispatchHandler(serverCtx),
			},
			{
				// 确认派发结果
				Method:  http.MethodPost,
				Path:    "/confirm",
				Handler: dispatch.DispatchConfirmHandler(serverCtx),
			},
			{
				// 自动派发候选预览
				Method:  http.MethodPost,
				Path:    "/preview",
				Handler: dispatch.DispatchPreviewHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.true.AccessSecret),
		rest.WithPrefix("/api/v1/dispatch"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 直接交接（即时生效）
				Method:  http.MethodPost,
				Path:    "/",
				Handler: handover.HandoverHandler(serverCtx),
			},
			{
				// 同意交接
				Method:  http.MethodPost,
				Path:    "/accept",
				Handler: handover.HandoverAcceptHandler(serverCtx),
			},
			{
				// 交接记录列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: handover.HandoverListHandler(serverCtx),
			},
			{
				// 发起交接提议
				Method:  http.MethodPost,
				Path:    "/propose",
				Handler: handover.HandoverProposeHandler(serverCtx),
			},
			{
				// 拒绝交接
				Method:  http.MethodPost,
				Path:    "/reject",
				Handler: handover.HandoverRejectHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.true.AccessSecret),
		rest.WithPrefix("/api/v1/handover"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 通知已读确认
				Method:  http.MethodPost,
				Path:    "/ack",
				Handler: notification.NotificationAckHandler(serverCtx),
			},
			{
				// 通知列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: notification.NotificationListHandler(serverCtx),
			},
			{
				// 触发到期提醒
				Method:  http.MethodPost,
				Path:    "/triggerDue",
				Handler: notification.TriggerDueRemindersHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.true.AccessSecret),
		rest.WithPrefix("/api/v1/notification"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 查询任务排期
				Method:  http.MethodGet,
				Path:    "/",
				Handler: schedule.ScheduleQueryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.true.AccessSecret),
		rest.WithPrefix("/api/v1/schedule"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建任务
				Method:  http.MethodPost,
				Path:    "/",
				Handler: task.TaskCreateHandler(serverCtx),
			},
			{
				// 更新任务
				Method:  http.MethodPut,
				Path:    "/",
				Handler: task.TaskUpdateHandler(serverCtx),
			},
			{
				// 任务列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: task.TaskListHandler(serverCtx),
			},
			{
				// 新增任务明细/日报
				Method:  http.MethodPost,
				Path:    "/log",
				Handler: task.LogCreateHandler(serverCtx),
			},
			{
				// 更新任务明细/进度
				Method:  http.MethodPut,
				Path:    "/log",
				Handler: task.LogUpdateHandler(serverCtx),
			},
			{
				// 任务明细列表
				Method:  http.MethodGet,
				Path:    "/log/list",
				Handler: task.LogListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.true.AccessSecret),
		rest.WithPrefix("/api/v1/task"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建用户档案
				Method:  http.MethodPost,
				Path:    "/",
				Handler: user.UserCreateHandler(serverCtx),
			},
			{
				// 更新用户档案
				Method:  http.MethodPut,
				Path:    "/",
				Handler: user.UserUpdateHandler(serverCtx),
			},
			{
				// 删除用户
				Method:  http.MethodDelete,
				Path:    "/",
				Handler: user.UserDeleteHandler(serverCtx),
			},
			{
				// 用户档案列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: user.UserListHandler(serverCtx),
			},
			{
				// 用户离职
				Method:  http.MethodPost,
				Path:    "/resign",
				Handler: user.UserResignHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.true.AccessSecret),
		rest.WithPrefix("/api/v1/user"),
	)
}
