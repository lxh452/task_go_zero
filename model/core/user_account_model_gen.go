// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package core

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAccountFieldNames          = builder.RawFieldNames(&UserAccount{})
	userAccountRows                = strings.Join(userAccountFieldNames, ",")
	userAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(userAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(userAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userAccountModel interface {
		Insert(ctx context.Context, data *UserAccount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAccount, error)
		FindOneByCompanyIdAccount(ctx context.Context, companyId int64, account string) (*UserAccount, error)
		Update(ctx context.Context, data *UserAccount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserAccount struct {
		Id           int64          `db:"id"`
		CompanyId    int64          `db:"company_id"`
		DepartmentId sql.NullInt64  `db:"department_id"`
		Account      string         `db:"account"`
		Name         string         `db:"name"`
		Email        sql.NullString `db:"email"`
		RoleTags     string         `db:"role_tags"`
		Status       int64          `db:"status"`
		HiredAt      sql.NullTime   `db:"hired_at"`
		LeftAt       sql.NullTime   `db:"left_at"`
		CreatedAt    time.Time      `db:"created_at"`
		UpdatedAt    time.Time      `db:"updated_at"`
	}
)

func newUserAccountModel(conn sqlx.SqlConn) *defaultUserAccountModel {
	return &defaultUserAccountModel{
		conn:  conn,
		table: "`user_account`",
	}
}

func (m *defaultUserAccountModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserAccountModel) FindOne(ctx context.Context, id int64) (*UserAccount, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAccountRows, m.table)
	var resp UserAccount
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAccountModel) FindOneByCompanyIdAccount(ctx context.Context, companyId int64, account string) (*UserAccount, error) {
	var resp UserAccount
	query := fmt.Sprintf("select %s from %s where `company_id` = ? and `account` = ? limit 1", userAccountRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, companyId, account)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAccountModel) Insert(ctx context.Context, data *UserAccount) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userAccountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.DepartmentId, data.Account, data.Name, data.Email, data.RoleTags, data.Status, data.HiredAt, data.LeftAt)
	return ret, err
}

func (m *defaultUserAccountModel) Update(ctx context.Context, newData *UserAccount) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAccountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CompanyId, newData.DepartmentId, newData.Account, newData.Name, newData.Email, newData.RoleTags, newData.Status, newData.HiredAt, newData.LeftAt, newData.Id)
	return err
}

func (m *defaultUserAccountModel) tableName() string {
	return m.table
}
