// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package core

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userTaskLogFieldNames          = builder.RawFieldNames(&UserTaskLog{})
	userTaskLogRows                = strings.Join(userTaskLogFieldNames, ",")
	userTaskLogRowsExpectAutoSet   = strings.Join(stringx.Remove(userTaskLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userTaskLogRowsWithPlaceHolder = strings.Join(stringx.Remove(userTaskLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userTaskLogModel interface {
		Insert(ctx context.Context, data *UserTaskLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserTaskLog, error)
		Update(ctx context.Context, data *UserTaskLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserTaskLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserTaskLog struct {
		Id                  int64          `db:"id"`
		CompanyId           int64          `db:"company_id"`
		TaskId              int64          `db:"task_id"`
		NodeKey             sql.NullString `db:"node_key"`
		UserId              int64          `db:"user_id"`
		CollaboratorUserIds string         `db:"collaborator_user_ids"`
		ProgressPercent     int64          `db:"progress_percent"`
		ReportNote          sql.NullString `db:"report_note"`
		Status              int64          `db:"status"`
		DeadlineAt          sql.NullTime   `db:"deadline_at"`
		HandoverId          sql.NullInt64  `db:"handover_id"`
		IsActive            int64          `db:"is_active"`
		CreatedAt           time.Time      `db:"created_at"`
		UpdatedAt           time.Time      `db:"updated_at"`
	}
)

func newUserTaskLogModel(conn sqlx.SqlConn) *defaultUserTaskLogModel {
	return &defaultUserTaskLogModel{
		conn:  conn,
		table: "`user_task_log`",
	}
}

func (m *defaultUserTaskLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserTaskLogModel) FindOne(ctx context.Context, id int64) (*UserTaskLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTaskLogRows, m.table)
	var resp UserTaskLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTaskLogModel) Insert(ctx context.Context, data *UserTaskLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userTaskLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.TaskId, data.NodeKey, data.UserId, data.CollaboratorUserIds, data.ProgressPercent, data.ReportNote, data.Status, data.DeadlineAt, data.HandoverId, data.IsActive)
	return ret, err
}

func (m *defaultUserTaskLogModel) Update(ctx context.Context, data *UserTaskLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userTaskLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.TaskId, data.NodeKey, data.UserId, data.CollaboratorUserIds, data.ProgressPercent, data.ReportNote, data.Status, data.DeadlineAt, data.HandoverId, data.IsActive, data.Id)
	return err
}

func (m *defaultUserTaskLogModel) tableName() string {
	return m.table
}
