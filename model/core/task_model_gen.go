// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package core

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskFieldNames          = builder.RawFieldNames(&Task{})
	taskRows                = strings.Join(taskFieldNames, ",")
	taskRowsExpectAutoSet   = strings.Join(stringx.Remove(taskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskRowsWithPlaceHolder = strings.Join(stringx.Remove(taskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	taskModel interface {
		Insert(ctx context.Context, data *Task) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Task, error)
		Update(ctx context.Context, data *Task) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Task struct {
		Id                  int64          `db:"id"`
		CompanyId           int64          `db:"company_id"`
		DepartmentId        sql.NullInt64  `db:"department_id"`
		Title               string         `db:"title"`
		Description         sql.NullString `db:"description"`
		AttachmentsUrl      sql.NullString `db:"attachments_url"`
		OwnerUserIds        string         `db:"owner_user_ids"`
		NodeUserIds         string         `db:"node_user_ids"`
		FlowAssignees       string         `db:"flow_assignees"`
		Priority            int64          `db:"priority"`
		StartDate           sql.NullTime   `db:"start_date"`
		DueDate             sql.NullTime   `db:"due_date"`
		ScheduleGranularity string         `db:"schedule_granularity"`
		Status              int64          `db:"status"`
		HandoverRequired    int64          `db:"handover_required"`
		CreatedBy           sql.NullInt64  `db:"created_by"`
		CreatedAt           time.Time      `db:"created_at"`
		UpdatedAt           time.Time      `db:"updated_at"`
	}
)

func newTaskModel(conn sqlx.SqlConn) *defaultTaskModel {
	return &defaultTaskModel{
		conn:  conn,
		table: "`task`",
	}
}

func (m *defaultTaskModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTaskModel) FindOne(ctx context.Context, id int64) (*Task, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskRows, m.table)
	var resp Task
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) Insert(ctx context.Context, data *Task) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.DepartmentId, data.Title, data.Description, data.AttachmentsUrl, data.OwnerUserIds, data.NodeUserIds, data.FlowAssignees, data.Priority, data.StartDate, data.DueDate, data.ScheduleGranularity, data.Status, data.HandoverRequired, data.CreatedBy)
	return ret, err
}

func (m *defaultTaskModel) Update(ctx context.Context, data *Task) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.DepartmentId, data.Title, data.Description, data.AttachmentsUrl, data.OwnerUserIds, data.NodeUserIds, data.FlowAssignees, data.Priority, data.StartDate, data.DueDate, data.ScheduleGranularity, data.Status, data.HandoverRequired, data.CreatedBy, data.Id)
	return err
}

func (m *defaultTaskModel) tableName() string {
	return m.table
}
