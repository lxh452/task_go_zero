// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package core

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	authAccountFieldNames          = builder.RawFieldNames(&AuthAccount{})
	authAccountRows                = strings.Join(authAccountFieldNames, ",")
	authAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(authAccountFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	authAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(authAccountFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	authAccountModel interface {
		Insert(ctx context.Context, data *AuthAccount) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*AuthAccount, error)
		Update(ctx context.Context, data *AuthAccount) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultAuthAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AuthAccount struct {
		UserId           int64        `db:"user_id"`
		PasswordHash     string       `db:"password_hash"`
		LastLoginAt      sql.NullTime `db:"last_login_at"`
		LoginFailedCount int64        `db:"login_failed_count"`
		LockedUntil      sql.NullTime `db:"locked_until"`
	}
)

func newAuthAccountModel(conn sqlx.SqlConn) *defaultAuthAccountModel {
	return &defaultAuthAccountModel{
		conn:  conn,
		table: "`auth_account`",
	}
}

func (m *defaultAuthAccountModel) Delete(ctx context.Context, userId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultAuthAccountModel) FindOne(ctx context.Context, userId int64) (*AuthAccount, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", authAccountRows, m.table)
	var resp AuthAccount
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuthAccountModel) Insert(ctx context.Context, data *AuthAccount) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, authAccountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.PasswordHash, data.LastLoginAt, data.LoginFailedCount, data.LockedUntil)
	return ret, err
}

func (m *defaultAuthAccountModel) Update(ctx context.Context, data *AuthAccount) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, authAccountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PasswordHash, data.LastLoginAt, data.LoginFailedCount, data.LockedUntil, data.UserId)
	return err
}

func (m *defaultAuthAccountModel) tableName() string {
	return m.table
}
