// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package task

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskLogFieldNames          = builder.RawFieldNames(&TaskLog{})
	taskLogRows                = strings.Join(taskLogFieldNames, ",")
	taskLogRowsExpectAutoSet   = strings.Join(stringx.Remove(taskLogFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskLogRowsWithPlaceHolder = strings.Join(stringx.Remove(taskLogFieldNames, "`log_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	taskLogModel interface {
		Insert(ctx context.Context, data *TaskLog) (sql.Result, error)
		FindOne(ctx context.Context, logId string) (*TaskLog, error)
		Update(ctx context.Context, data *TaskLog) error
		Delete(ctx context.Context, logId string) error
	}

	defaultTaskLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TaskLog struct {
		LogId         string         `db:"log_id"`         // 日志id
		TaskId        string         `db:"task_id"`        // 任务id
		TaskNodeId    sql.NullString `db:"task_node_id"`   // 任务节点id
		EmployeeId    string         `db:"employee_id"`    // 操作员工id
		LogType       int64          `db:"log_type"`       // 日志类型 0-创建 1-更新 2-完成 3-交接 4-评论
		LogContent    string         `db:"log_content"`    // 日志内容
		Progress      sql.NullInt64  `db:"progress"`       // 进度百分比
		AttachmentUrl sql.NullString `db:"attachment_url"` // 附件URL
		CreateTime    time.Time      `db:"create_time"`    // 创建时间
	}
)

func newTaskLogModel(conn sqlx.SqlConn) *defaultTaskLogModel {
	return &defaultTaskLogModel{
		conn:  conn,
		table: "`task_log`",
	}
}

func (m *defaultTaskLogModel) Delete(ctx context.Context, logId string) error {
	query := fmt.Sprintf("delete from %s where `log_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, logId)
	return err
}

func (m *defaultTaskLogModel) FindOne(ctx context.Context, logId string) (*TaskLog, error) {
	query := fmt.Sprintf("select %s from %s where `log_id` = ? limit 1", taskLogRows, m.table)
	var resp TaskLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, logId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskLogModel) Insert(ctx context.Context, data *TaskLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.LogId, data.TaskId, data.TaskNodeId, data.EmployeeId, data.LogType, data.LogContent, data.Progress, data.AttachmentUrl)
	return ret, err
}

func (m *defaultTaskLogModel) Update(ctx context.Context, data *TaskLog) error {
	query := fmt.Sprintf("update %s set %s where `log_id` = ?", m.table, taskLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TaskId, data.TaskNodeId, data.EmployeeId, data.LogType, data.LogContent, data.Progress, data.AttachmentUrl, data.LogId)
	return err
}

func (m *defaultTaskLogModel) tableName() string {
	return m.table
}
