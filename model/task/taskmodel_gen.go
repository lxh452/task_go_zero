// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package task

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskFieldNames          = builder.RawFieldNames(&Task{})
	taskRows                = strings.Join(taskFieldNames, ",")
	taskRowsExpectAutoSet   = strings.Join(stringx.Remove(taskFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskRowsWithPlaceHolder = strings.Join(stringx.Remove(taskFieldNames, "`task_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	taskModel interface {
		Insert(ctx context.Context, data *Task) (sql.Result, error)
		FindOne(ctx context.Context, taskId string) (*Task, error)
		Update(ctx context.Context, data *Task) error
		Delete(ctx context.Context, taskId string) error
	}

	defaultTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Task struct {
		TaskId                 string         `db:"task_id"`                  // 任务id
		CompanyId              string         `db:"company_id"`               // 公司id
		TaskTitle              string         `db:"task_title"`               // 任务标题
		TaskDetail             string         `db:"task_detail"`              // 任务详情
		TaskStatus             int64          `db:"task_status"`              // 任务状态：0-未开始，1-进行中，2-已完成，3-逾期完成
		TaskPriority           int64          `db:"task_priority"`            // 任务优先级：0-不重要不紧急，1-紧急不重要，2-重要但不紧急，3-重要且紧急
		TaskType               int64          `db:"task_type"`                // 任务类型：0-单部门任务，1-跨部门任务
		ResponsibleEmployeeIds sql.NullString `db:"responsible_employee_ids"` // 负责人员工ID列表
		NodeEmployeeIds        sql.NullString `db:"node_employee_ids"`        // 节点员工ID列表
		DepartmentIds          sql.NullString `db:"department_ids"`           // 涉及部门ID列表
		TaskStartTime          time.Time      `db:"task_start_time"`          // 任务开始时间
		TaskDeadline           time.Time      `db:"task_deadline"`            // 任务截止时间
		TaskCreator            string         `db:"task_creator"`             // 任务创建者员工ID
		TaskAssigner           sql.NullString `db:"task_assigner"`            // 任务分配者员工ID
		AttachmentUrl          sql.NullString `db:"attachment_url"`           // 附件URL
		CreateTime             time.Time      `db:"create_time"`              // 创建时间
		UpdateTime             time.Time      `db:"update_time"`              // 更新时间
		DeleteTime             sql.NullTime   `db:"delete_time"`              // 删除时间
	}
)

func newTaskModel(conn sqlx.SqlConn) *defaultTaskModel {
	return &defaultTaskModel{
		conn:  conn,
		table: "`task`",
	}
}

func (m *defaultTaskModel) Delete(ctx context.Context, taskId string) error {
	query := fmt.Sprintf("delete from %s where `task_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, taskId)
	return err
}

func (m *defaultTaskModel) FindOne(ctx context.Context, taskId string) (*Task, error) {
	query := fmt.Sprintf("select %s from %s where `task_id` = ? limit 1", taskRows, m.table)
	var resp Task
	err := m.conn.QueryRowCtx(ctx, &resp, query, taskId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) Insert(ctx context.Context, data *Task) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TaskId, data.CompanyId, data.TaskTitle, data.TaskDetail, data.TaskStatus, data.TaskPriority, data.TaskType, data.ResponsibleEmployeeIds, data.NodeEmployeeIds, data.DepartmentIds, data.TaskStartTime, data.TaskDeadline, data.TaskCreator, data.TaskAssigner, data.AttachmentUrl, data.DeleteTime)
	return ret, err
}

func (m *defaultTaskModel) Update(ctx context.Context, data *Task) error {
	query := fmt.Sprintf("update %s set %s where `task_id` = ?", m.table, taskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.TaskTitle, data.TaskDetail, data.TaskStatus, data.TaskPriority, data.TaskType, data.ResponsibleEmployeeIds, data.NodeEmployeeIds, data.DepartmentIds, data.TaskStartTime, data.TaskDeadline, data.TaskCreator, data.TaskAssigner, data.AttachmentUrl, data.DeleteTime, data.TaskId)
	return err
}

func (m *defaultTaskModel) tableName() string {
	return m.table
}
