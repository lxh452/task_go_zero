// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package task

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskHandoverFieldNames          = builder.RawFieldNames(&TaskHandover{})
	taskHandoverRows                = strings.Join(taskHandoverFieldNames, ",")
	taskHandoverRowsExpectAutoSet   = strings.Join(stringx.Remove(taskHandoverFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskHandoverRowsWithPlaceHolder = strings.Join(stringx.Remove(taskHandoverFieldNames, "`handover_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	taskHandoverModel interface {
		Insert(ctx context.Context, data *TaskHandover) (sql.Result, error)
		FindOne(ctx context.Context, handoverId string) (*TaskHandover, error)
		Update(ctx context.Context, data *TaskHandover) error
		Delete(ctx context.Context, handoverId string) error
	}

	defaultTaskHandoverModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TaskHandover struct {
		HandoverId     string         `db:"handover_id"`      // 交接id
		TaskId         string         `db:"task_id"`          // 任务id
		FromEmployeeId string         `db:"from_employee_id"` // 原负责人员工id
		ToEmployeeId   string         `db:"to_employee_id"`   // 新负责人员工id
		HandoverType   int64          `db:"handover_type"`    // 交接类型 0-提议 1-直接交接 2-系统自动
		HandoverStatus int64          `db:"handover_status"`  // 交接状态 0-待确认 1-已接受 2-已拒绝 3-已完成
		HandoverReason sql.NullString `db:"handover_reason"`  // 交接原因
		HandoverNote   sql.NullString `db:"handover_note"`    // 交接备注
		ApproverId     sql.NullString `db:"approver_id"`      // 审批人员工id
		ApproveTime    sql.NullTime   `db:"approve_time"`     // 审批时间
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		UpdateTime     time.Time      `db:"update_time"`      // 更新时间
	}
)

func newTaskHandoverModel(conn sqlx.SqlConn) *defaultTaskHandoverModel {
	return &defaultTaskHandoverModel{
		conn:  conn,
		table: "`task_handover`",
	}
}

func (m *defaultTaskHandoverModel) Delete(ctx context.Context, handoverId string) error {
	query := fmt.Sprintf("delete from %s where `handover_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, handoverId)
	return err
}

func (m *defaultTaskHandoverModel) FindOne(ctx context.Context, handoverId string) (*TaskHandover, error) {
	query := fmt.Sprintf("select %s from %s where `handover_id` = ? limit 1", taskHandoverRows, m.table)
	var resp TaskHandover
	err := m.conn.QueryRowCtx(ctx, &resp, query, handoverId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskHandoverModel) Insert(ctx context.Context, data *TaskHandover) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskHandoverRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.HandoverId, data.TaskId, data.FromEmployeeId, data.ToEmployeeId, data.HandoverType, data.HandoverStatus, data.HandoverReason, data.HandoverNote, data.ApproverId, data.ApproveTime)
	return ret, err
}

func (m *defaultTaskHandoverModel) Update(ctx context.Context, data *TaskHandover) error {
	query := fmt.Sprintf("update %s set %s where `handover_id` = ?", m.table, taskHandoverRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TaskId, data.FromEmployeeId, data.ToEmployeeId, data.HandoverType, data.HandoverStatus, data.HandoverReason, data.HandoverNote, data.ApproverId, data.ApproveTime, data.HandoverId)
	return err
}

func (m *defaultTaskHandoverModel) tableName() string {
	return m.table
}
