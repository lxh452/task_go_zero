// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package task

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskNodeFieldNames          = builder.RawFieldNames(&TaskNode{})
	taskNodeRows                = strings.Join(taskNodeFieldNames, ",")
	taskNodeRowsExpectAutoSet   = strings.Join(stringx.Remove(taskNodeFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskNodeRowsWithPlaceHolder = strings.Join(stringx.Remove(taskNodeFieldNames, "`task_node_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	taskNodeModel interface {
		Insert(ctx context.Context, data *TaskNode) (sql.Result, error)
		FindOne(ctx context.Context, taskNodeId string) (*TaskNode, error)
		Update(ctx context.Context, data *TaskNode) error
		Delete(ctx context.Context, taskNodeId string) error
	}

	defaultTaskNodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TaskNode struct {
		TaskNodeId     string         `db:"task_node_id"`     // 任务节点id
		TaskId         string         `db:"task_id"`          // 任务id
		DepartmentId   string         `db:"department_id"`    // 部门id
		NodeName       string         `db:"node_name"`        // 节点名称
		NodeDetail     sql.NullString `db:"node_detail"`      // 节点详情
		NodeDeadline   time.Time      `db:"node_deadline"`    // 节点截止时间
		NodeStartTime  time.Time      `db:"node_start_time"`  // 节点开始时间
		EstimatedDays  int64          `db:"estimated_days"`   // 预计完成天数
		ActualDays     sql.NullInt64  `db:"actual_days"`      // 实际完成天数
		NodeStatus     int64          `db:"node_status"`      // 节点状态 0--未开始 1--进行中 2--已完成 3--已逾期
		NodeFinishTime sql.NullTime   `db:"node_finish_time"` // 节点完成时间
		ExecutorId     string         `db:"executor_id"`      // 节点执行人员工ID
		LeaderId       string         `db:"leader_id"`        // 节点负责人员工ID
		Progress       int64          `db:"progress"`         // 完成进度 0-100
		NodePriority   int64          `db:"node_priority"`    // 节点优先级 0-低 1-中 2-高 3-紧急
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		UpdateTime     time.Time      `db:"update_time"`      // 更新时间
		DeleteTime     sql.NullTime   `db:"delete_time"`      // 删除时间
	}
)

func newTaskNodeModel(conn sqlx.SqlConn) *defaultTaskNodeModel {
	return &defaultTaskNodeModel{
		conn:  conn,
		table: "`task_node`",
	}
}

func (m *defaultTaskNodeModel) Delete(ctx context.Context, taskNodeId string) error {
	query := fmt.Sprintf("delete from %s where `task_node_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, taskNodeId)
	return err
}

func (m *defaultTaskNodeModel) FindOne(ctx context.Context, taskNodeId string) (*TaskNode, error) {
	query := fmt.Sprintf("select %s from %s where `task_node_id` = ? limit 1", taskNodeRows, m.table)
	var resp TaskNode
	err := m.conn.QueryRowCtx(ctx, &resp, query, taskNodeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskNodeModel) Insert(ctx context.Context, data *TaskNode) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskNodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TaskNodeId, data.TaskId, data.DepartmentId, data.NodeName, data.NodeDetail, data.NodeDeadline, data.NodeStartTime, data.EstimatedDays, data.ActualDays, data.NodeStatus, data.NodeFinishTime, data.ExecutorId, data.LeaderId, data.Progress, data.NodePriority, data.DeleteTime)
	return ret, err
}

func (m *defaultTaskNodeModel) Update(ctx context.Context, data *TaskNode) error {
	query := fmt.Sprintf("update %s set %s where `task_node_id` = ?", m.table, taskNodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TaskId, data.DepartmentId, data.NodeName, data.NodeDetail, data.NodeDeadline, data.NodeStartTime, data.EstimatedDays, data.ActualDays, data.NodeStatus, data.NodeFinishTime, data.ExecutorId, data.LeaderId, data.Progress, data.NodePriority, data.DeleteTime, data.TaskNodeId)
	return err
}

func (m *defaultTaskNodeModel) tableName() string {
	return m.table
}
