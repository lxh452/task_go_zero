// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package role

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	operationLogFieldNames          = builder.RawFieldNames(&OperationLog{})
	operationLogRows                = strings.Join(operationLogFieldNames, ",")
	operationLogRowsExpectAutoSet   = strings.Join(stringx.Remove(operationLogFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	operationLogRowsWithPlaceHolder = strings.Join(stringx.Remove(operationLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	operationLogModel interface {
		Insert(ctx context.Context, data *OperationLog) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*OperationLog, error)
		Update(ctx context.Context, data *OperationLog) error
		Delete(ctx context.Context, id string) error
	}

	defaultOperationLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OperationLog struct {
		Id            string         `db:"id"`             // 日志id
		UserId        sql.NullString `db:"user_id"`        // 操作用户id
		EmployeeId    sql.NullString `db:"employee_id"`    // 操作员工id
		OperationType string         `db:"operation_type"` // 操作类型
		OperationName string         `db:"operation_name"` // 操作名称
		OperationDesc sql.NullString `db:"operation_desc"` // 操作描述
		RequestMethod sql.NullString `db:"request_method"` // 请求方法
		RequestUrl    sql.NullString `db:"request_url"`    // 请求URL
		RequestParams sql.NullString `db:"request_params"` // 请求参数
		ResponseData  sql.NullString `db:"response_data"`  // 响应数据
		IpAddress     sql.NullString `db:"ip_address"`     // IP地址
		UserAgent     sql.NullString `db:"user_agent"`     // 用户代理
		ExecutionTime sql.NullInt64  `db:"execution_time"` // 执行时间(毫秒)
		Status        int64          `db:"status"`         // 状态 0-失败 1-成功
		ErrorMessage  sql.NullString `db:"error_message"`  // 错误信息
		CreateTime    time.Time      `db:"create_time"`    // 创建时间
	}
)

func newOperationLogModel(conn sqlx.SqlConn) *defaultOperationLogModel {
	return &defaultOperationLogModel{
		conn:  conn,
		table: "`operation_log`",
	}
}

func (m *defaultOperationLogModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOperationLogModel) FindOne(ctx context.Context, id string) (*OperationLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", operationLogRows, m.table)
	var resp OperationLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOperationLogModel) Insert(ctx context.Context, data *OperationLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, operationLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.EmployeeId, data.OperationType, data.OperationName, data.OperationDesc, data.RequestMethod, data.RequestUrl, data.RequestParams, data.ResponseData, data.IpAddress, data.UserAgent, data.ExecutionTime, data.Status, data.ErrorMessage)
	return ret, err
}

func (m *defaultOperationLogModel) Update(ctx context.Context, data *OperationLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, operationLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.EmployeeId, data.OperationType, data.OperationName, data.OperationDesc, data.RequestMethod, data.RequestUrl, data.RequestParams, data.ResponseData, data.IpAddress, data.UserAgent, data.ExecutionTime, data.Status, data.ErrorMessage, data.Id)
	return err
}

func (m *defaultOperationLogModel) tableName() string {
	return m.table
}
