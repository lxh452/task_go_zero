// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package role

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	employeeRoleFieldNames          = builder.RawFieldNames(&EmployeeRole{})
	employeeRoleRows                = strings.Join(employeeRoleFieldNames, ",")
	employeeRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(employeeRoleFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	employeeRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(employeeRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	employeeRoleModel interface {
		Insert(ctx context.Context, data *EmployeeRole) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*EmployeeRole, error)
		FindOneByEmployeeIdRoleId(ctx context.Context, employeeId string, roleId string) (*EmployeeRole, error)
		Update(ctx context.Context, data *EmployeeRole) error
		Delete(ctx context.Context, id string) error
	}

	defaultEmployeeRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EmployeeRole struct {
		Id         string         `db:"id"`          // 关联id
		EmployeeId string         `db:"employee_id"` // 员工id
		RoleId     string         `db:"role_id"`     // 角色id
		GrantBy    sql.NullString `db:"grant_by"`    // 授权人id
		GrantTime  time.Time      `db:"grant_time"`  // 授权时间
		ExpireTime sql.NullTime   `db:"expire_time"` // 过期时间
		Status     int64          `db:"status"`      // 状态 0-禁用 1-正常
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
	}
)

func newEmployeeRoleModel(conn sqlx.SqlConn) *defaultEmployeeRoleModel {
	return &defaultEmployeeRoleModel{
		conn:  conn,
		table: "`employee_role`",
	}
}

func (m *defaultEmployeeRoleModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEmployeeRoleModel) FindOne(ctx context.Context, id string) (*EmployeeRole, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", employeeRoleRows, m.table)
	var resp EmployeeRole
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmployeeRoleModel) FindOneByEmployeeIdRoleId(ctx context.Context, employeeId string, roleId string) (*EmployeeRole, error) {
	var resp EmployeeRole
	query := fmt.Sprintf("select %s from %s where `employee_id` = ? and `role_id` = ? limit 1", employeeRoleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, employeeId, roleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmployeeRoleModel) Insert(ctx context.Context, data *EmployeeRole) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, employeeRoleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.EmployeeId, data.RoleId, data.GrantBy, data.GrantTime, data.ExpireTime, data.Status)
	return ret, err
}

func (m *defaultEmployeeRoleModel) Update(ctx context.Context, newData *EmployeeRole) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, employeeRoleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.EmployeeId, newData.RoleId, newData.GrantBy, newData.GrantTime, newData.ExpireTime, newData.Status, newData.Id)
	return err
}

func (m *defaultEmployeeRoleModel) tableName() string {
	return m.table
}
