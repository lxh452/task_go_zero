// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package role

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{})
	roleRows                = strings.Join(roleFieldNames, ",")
	roleRowsExpectAutoSet   = strings.Join(stringx.Remove(roleFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleRowsWithPlaceHolder = strings.Join(stringx.Remove(roleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Role, error)
		FindOneByCompanyIdRoleCode(ctx context.Context, companyId string, roleCode string) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, id string) error
	}

	defaultRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Role struct {
		Id              string         `db:"id"`               // 角色id
		CompanyId       string         `db:"company_id"`       // 公司id
		RoleName        string         `db:"role_name"`        // 角色名称
		RoleCode        string         `db:"role_code"`        // 角色编码
		RoleDescription sql.NullString `db:"role_description"` // 角色描述
		IsSystem        int64          `db:"is_system"`        // 是否系统角色 0-否 1-是
		Permissions     sql.NullString `db:"permissions"`      // 权限列表
		Status          int64          `db:"status"`           // 状态 0-禁用 1-正常
		CreateTime      time.Time      `db:"create_time"`      // 创建时间
		UpdateTime      time.Time      `db:"update_time"`      // 更新时间
		DeleteTime      sql.NullTime   `db:"delete_time"`      // 删除时间
	}
)

func newRoleModel(conn sqlx.SqlConn) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  conn,
		table: "`role`",
	}
}

func (m *defaultRoleModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, id string) (*Role, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleRows, m.table)
	var resp Role
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) FindOneByCompanyIdRoleCode(ctx context.Context, companyId string, roleCode string) (*Role, error) {
	var resp Role
	query := fmt.Sprintf("select %s from %s where `company_id` = ? and `role_code` = ? limit 1", roleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, companyId, roleCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, roleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.CompanyId, data.RoleName, data.RoleCode, data.RoleDescription, data.IsSystem, data.Permissions, data.Status, data.DeleteTime)
	return ret, err
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CompanyId, newData.RoleName, newData.RoleCode, newData.RoleDescription, newData.IsSystem, newData.Permissions, newData.Status, newData.DeleteTime, newData.Id)
	return err
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
