// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package role

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemConfigFieldNames          = builder.RawFieldNames(&SystemConfig{})
	systemConfigRows                = strings.Join(systemConfigFieldNames, ",")
	systemConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(systemConfigFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	systemConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(systemConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	systemConfigModel interface {
		Insert(ctx context.Context, data *SystemConfig) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*SystemConfig, error)
		FindOneByConfigKey(ctx context.Context, configKey string) (*SystemConfig, error)
		Update(ctx context.Context, data *SystemConfig) error
		Delete(ctx context.Context, id string) error
	}

	defaultSystemConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SystemConfig struct {
		Id          string         `db:"id"`           // 配置id
		ConfigKey   string         `db:"config_key"`   // 配置键
		ConfigValue sql.NullString `db:"config_value"` // 配置值
		ConfigType  int64          `db:"config_type"`  // 配置类型 0-字符串 1-数字 2-布尔 3-JSON
		ConfigGroup sql.NullString `db:"config_group"` // 配置分组
		Description sql.NullString `db:"description"`  // 配置描述
		IsSystem    int64          `db:"is_system"`    // 是否系统配置 0-否 1-是
		IsEncrypted int64          `db:"is_encrypted"` // 是否加密 0-否 1-是
		Status      int64          `db:"status"`       // 状态 0-禁用 1-正常
		CreateTime  time.Time      `db:"create_time"`  // 创建时间
		UpdateTime  time.Time      `db:"update_time"`  // 更新时间
	}
)

func newSystemConfigModel(conn sqlx.SqlConn) *defaultSystemConfigModel {
	return &defaultSystemConfigModel{
		conn:  conn,
		table: "`system_config`",
	}
}

func (m *defaultSystemConfigModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSystemConfigModel) FindOne(ctx context.Context, id string) (*SystemConfig, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemConfigRows, m.table)
	var resp SystemConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemConfigModel) FindOneByConfigKey(ctx context.Context, configKey string) (*SystemConfig, error) {
	var resp SystemConfig
	query := fmt.Sprintf("select %s from %s where `config_key` = ? limit 1", systemConfigRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, configKey)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemConfigModel) Insert(ctx context.Context, data *SystemConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, systemConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ConfigKey, data.ConfigValue, data.ConfigType, data.ConfigGroup, data.Description, data.IsSystem, data.IsEncrypted, data.Status)
	return ret, err
}

func (m *defaultSystemConfigModel) Update(ctx context.Context, newData *SystemConfig) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ConfigKey, newData.ConfigValue, newData.ConfigType, newData.ConfigGroup, newData.Description, newData.IsSystem, newData.IsEncrypted, newData.Status, newData.Id)
	return err
}

func (m *defaultSystemConfigModel) tableName() string {
	return m.table
}
