// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*User, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*User, error)
		FindOneByPhone(ctx context.Context, phone sql.NullString) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id               string         `db:"id"`                 // 用户id
		Username         string         `db:"username"`           // 用户名
		PasswordHash     string         `db:"password_hash"`      // 密码哈希
		Email            sql.NullString `db:"email"`              // 邮箱
		Phone            sql.NullString `db:"phone"`              // 手机号
		Avatar           sql.NullString `db:"avatar"`             // 头像URL
		RealName         sql.NullString `db:"real_name"`          // 真实姓名
		Gender           sql.NullInt64  `db:"gender"`             // 性别 0-未知 1-男 2-女
		Birthday         sql.NullTime   `db:"birthday"`           // 生日
		Status           int64          `db:"status"`             // 状态 0-禁用 1-正常 2-锁定
		LastLoginTime    sql.NullTime   `db:"last_login_time"`    // 最后登录时间
		LastLoginIp      sql.NullString `db:"last_login_ip"`      // 最后登录IP
		LoginFailedCount int64          `db:"login_failed_count"` // 登录失败次数
		LockedUntil      sql.NullTime   `db:"locked_until"`       // 锁定到期时间
		CreateTime       time.Time      `db:"create_time"`        // 创建时间
		UpdateTime       time.Time      `db:"update_time"`        // 更新时间
		DeleteTime       sql.NullTime   `db:"delete_time"`        // 删除时间
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id string) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByPhone(ctx context.Context, phone sql.NullString) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Username, data.PasswordHash, data.Email, data.Phone, data.Avatar, data.RealName, data.Gender, data.Birthday, data.Status, data.LastLoginTime, data.LastLoginIp, data.LoginFailedCount, data.LockedUntil, data.DeleteTime)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.PasswordHash, newData.Email, newData.Phone, newData.Avatar, newData.RealName, newData.Gender, newData.Birthday, newData.Status, newData.LastLoginTime, newData.LastLoginIp, newData.LoginFailedCount, newData.LockedUntil, newData.DeleteTime, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
