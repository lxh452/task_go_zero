// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	employeeFieldNames          = builder.RawFieldNames(&Employee{})
	employeeRows                = strings.Join(employeeFieldNames, ",")
	employeeRowsExpectAutoSet   = strings.Join(stringx.Remove(employeeFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	employeeRowsWithPlaceHolder = strings.Join(stringx.Remove(employeeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	employeeModel interface {
		Insert(ctx context.Context, data *Employee) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Employee, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*Employee, error)
		FindOneByEmployeeId(ctx context.Context, employeeId string) (*Employee, error)
		FindOneByUserId(ctx context.Context, userId string) (*Employee, error)
		Update(ctx context.Context, data *Employee) error
		Delete(ctx context.Context, id string) error
	}

	defaultEmployeeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Employee struct {
		Id           string         `db:"id"`            // 员工id
		UserId       string         `db:"user_id"`       // 关联用户id
		CompanyId    string         `db:"company_id"`    // 公司id
		DepartmentId sql.NullString `db:"department_id"` // 部门id
		PositionId   sql.NullString `db:"position_id"`   // 职位id
		EmployeeId   string         `db:"employee_id"`   // 工号
		RealName     string         `db:"real_name"`     // 真实姓名
		Email        sql.NullString `db:"email"`         // 工作邮箱
		Phone        sql.NullString `db:"phone"`         // 工作电话
		Skills       sql.NullString `db:"skills"`        // 技能标签
		RoleTags     sql.NullString `db:"role_tags"`     // 角色标签
		HireDate     sql.NullTime   `db:"hire_date"`     // 入职日期
		LeaveDate    sql.NullTime   `db:"leave_date"`    // 离职日期
		Status       int64          `db:"status"`        // 状态 0-离职 1-在职 2-请假
		CreateTime   time.Time      `db:"create_time"`   // 创建时间
		UpdateTime   time.Time      `db:"update_time"`   // 更新时间
		DeleteTime   sql.NullTime   `db:"delete_time"`   // 删除时间
	}
)

func newEmployeeModel(conn sqlx.SqlConn) *defaultEmployeeModel {
	return &defaultEmployeeModel{
		conn:  conn,
		table: "`employee`",
	}
}

func (m *defaultEmployeeModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEmployeeModel) FindOne(ctx context.Context, id string) (*Employee, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", employeeRows, m.table)
	var resp Employee
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmployeeModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*Employee, error) {
	var resp Employee
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", employeeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmployeeModel) FindOneByEmployeeId(ctx context.Context, employeeId string) (*Employee, error) {
	var resp Employee
	query := fmt.Sprintf("select %s from %s where `employee_id` = ? limit 1", employeeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, employeeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmployeeModel) FindOneByUserId(ctx context.Context, userId string) (*Employee, error) {
	var resp Employee
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", employeeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmployeeModel) Insert(ctx context.Context, data *Employee) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, employeeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.CompanyId, data.DepartmentId, data.PositionId, data.EmployeeId, data.RealName, data.Email, data.Phone, data.Skills, data.RoleTags, data.HireDate, data.LeaveDate, data.Status, data.DeleteTime)
	return ret, err
}

func (m *defaultEmployeeModel) Update(ctx context.Context, newData *Employee) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, employeeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.CompanyId, newData.DepartmentId, newData.PositionId, newData.EmployeeId, newData.RealName, newData.Email, newData.Phone, newData.Skills, newData.RoleTags, newData.HireDate, newData.LeaveDate, newData.Status, newData.DeleteTime, newData.Id)
	return err
}

func (m *defaultEmployeeModel) tableName() string {
	return m.table
}
