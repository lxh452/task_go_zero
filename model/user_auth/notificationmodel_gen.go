// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package user_auth

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	notificationFieldNames          = builder.RawFieldNames(&Notification{})
	notificationRows                = strings.Join(notificationFieldNames, ",")
	notificationRowsExpectAutoSet   = strings.Join(stringx.Remove(notificationFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	notificationRowsWithPlaceHolder = strings.Join(stringx.Remove(notificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	notificationModel interface {
		Insert(ctx context.Context, data *Notification) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Notification, error)
		Update(ctx context.Context, data *Notification) error
		Delete(ctx context.Context, id string) error
	}

	defaultNotificationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Notification struct {
		Id          string         `db:"id"`           // 通知id
		EmployeeId  string         `db:"employee_id"`  // 接收员工id
		Title       string         `db:"title"`        // 通知标题
		Content     string         `db:"content"`      // 通知内容
		Type        int64          `db:"type"`         // 通知类型 0-系统 1-任务 2-交接 3-提醒
		Category    sql.NullString `db:"category"`     // 通知分类
		IsRead      int64          `db:"is_read"`      // 是否已读 0-未读 1-已读
		ReadTime    sql.NullTime   `db:"read_time"`    // 阅读时间
		Priority    int64          `db:"priority"`     // 优先级 0-低 1-中 2-高 3-紧急
		RelatedId   sql.NullString `db:"related_id"`   // 关联对象id（任务id等）
		RelatedType sql.NullString `db:"related_type"` // 关联对象类型
		SenderId    sql.NullString `db:"sender_id"`    // 发送者员工id
		CreateTime  time.Time      `db:"create_time"`  // 创建时间
		UpdateTime  time.Time      `db:"update_time"`  // 更新时间
	}
)

func newNotificationModel(conn sqlx.SqlConn) *defaultNotificationModel {
	return &defaultNotificationModel{
		conn:  conn,
		table: "`notification`",
	}
}

func (m *defaultNotificationModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultNotificationModel) FindOne(ctx context.Context, id string) (*Notification, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", notificationRows, m.table)
	var resp Notification
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNotificationModel) Insert(ctx context.Context, data *Notification) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, notificationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.EmployeeId, data.Title, data.Content, data.Type, data.Category, data.IsRead, data.ReadTime, data.Priority, data.RelatedId, data.RelatedType, data.SenderId)
	return ret, err
}

func (m *defaultNotificationModel) Update(ctx context.Context, data *Notification) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, notificationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.EmployeeId, data.Title, data.Content, data.Type, data.Category, data.IsRead, data.ReadTime, data.Priority, data.RelatedId, data.RelatedType, data.SenderId, data.Id)
	return err
}

func (m *defaultNotificationModel) tableName() string {
	return m.table
}
