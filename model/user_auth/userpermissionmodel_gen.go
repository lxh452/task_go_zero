// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package user_auth

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userPermissionFieldNames          = builder.RawFieldNames(&UserPermission{})
	userPermissionRows                = strings.Join(userPermissionFieldNames, ",")
	userPermissionRowsExpectAutoSet   = strings.Join(stringx.Remove(userPermissionFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userPermissionRowsWithPlaceHolder = strings.Join(stringx.Remove(userPermissionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userPermissionModel interface {
		Insert(ctx context.Context, data *UserPermission) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*UserPermission, error)
		Update(ctx context.Context, data *UserPermission) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserPermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserPermission struct {
		Id             string         `db:"id"`              // 权限id
		UserId         string         `db:"user_id"`         // 用户id
		PermissionCode string         `db:"permission_code"` // 权限编码
		PermissionName string         `db:"permission_name"` // 权限名称
		ResourceType   int64          `db:"resource_type"`   // 资源类型 0-菜单 1-按钮 2-接口 3-数据
		ResourceId     sql.NullString `db:"resource_id"`     // 资源id
		GrantType      int64          `db:"grant_type"`      // 授权类型 0-直接授权 1-角色授权 2-部门授权
		GrantBy        sql.NullString `db:"grant_by"`        // 授权人id
		ExpireTime     sql.NullTime   `db:"expire_time"`     // 过期时间
		Status         int64          `db:"status"`          // 状态 0-禁用 1-正常
		CreateTime     time.Time      `db:"create_time"`     // 创建时间
		UpdateTime     time.Time      `db:"update_time"`     // 更新时间
	}
)

func newUserPermissionModel(conn sqlx.SqlConn) *defaultUserPermissionModel {
	return &defaultUserPermissionModel{
		conn:  conn,
		table: "`user_permission`",
	}
}

func (m *defaultUserPermissionModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserPermissionModel) FindOne(ctx context.Context, id string) (*UserPermission, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userPermissionRows, m.table)
	var resp UserPermission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPermissionModel) Insert(ctx context.Context, data *UserPermission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userPermissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.PermissionCode, data.PermissionName, data.ResourceType, data.ResourceId, data.GrantType, data.GrantBy, data.ExpireTime, data.Status)
	return ret, err
}

func (m *defaultUserPermissionModel) Update(ctx context.Context, data *UserPermission) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userPermissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.PermissionCode, data.PermissionName, data.ResourceType, data.ResourceId, data.GrantType, data.GrantBy, data.ExpireTime, data.Status, data.Id)
	return err
}

func (m *defaultUserPermissionModel) tableName() string {
	return m.table
}
