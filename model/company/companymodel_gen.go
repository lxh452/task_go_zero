// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package company

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	companyFieldNames          = builder.RawFieldNames(&Company{})
	companyRows                = strings.Join(companyFieldNames, ",")
	companyRowsExpectAutoSet   = strings.Join(stringx.Remove(companyFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	companyRowsWithPlaceHolder = strings.Join(stringx.Remove(companyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	companyModel interface {
		Insert(ctx context.Context, data *Company) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Company, error)
		Update(ctx context.Context, data *Company) error
		Delete(ctx context.Context, id string) error
	}

	defaultCompanyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Company struct {
		Id                string         `db:"id"`                 // 公司id
		Name              string         `db:"name"`               // 公司名字
		CompanyAttributes int64          `db:"company_attributes"` // 企业属性 0--民营企业 1--外资企业 2--国有企业 3--合资企业
		CompanyBusiness   int64          `db:"company_business"`   // 公司业务 0--科技类 1--文化传媒类 2--咨询类 3--管理类
		Owner             string         `db:"owner"`              // 公司拥有者，与user表的id关联
		Description       sql.NullString `db:"description"`        // 公司描述
		Address           sql.NullString `db:"address"`            // 公司地址
		Phone             sql.NullString `db:"phone"`              // 联系电话
		Email             sql.NullString `db:"email"`              // 联系邮箱
		Status            int64          `db:"status"`             // 状态 0-禁用 1-正常
		CreateTime        time.Time      `db:"create_time"`        // 创建时间
		UpdateTime        time.Time      `db:"update_time"`        // 更新时间
		DeleteTime        sql.NullTime   `db:"delete_time"`        // 删除时间
	}
)

func newCompanyModel(conn sqlx.SqlConn) *defaultCompanyModel {
	return &defaultCompanyModel{
		conn:  conn,
		table: "`company`",
	}
}

func (m *defaultCompanyModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCompanyModel) FindOne(ctx context.Context, id string) (*Company, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", companyRows, m.table)
	var resp Company
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCompanyModel) Insert(ctx context.Context, data *Company) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, companyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.CompanyAttributes, data.CompanyBusiness, data.Owner, data.Description, data.Address, data.Phone, data.Email, data.Status, data.DeleteTime)
	return ret, err
}

func (m *defaultCompanyModel) Update(ctx context.Context, data *Company) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, companyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.CompanyAttributes, data.CompanyBusiness, data.Owner, data.Description, data.Address, data.Phone, data.Email, data.Status, data.DeleteTime, data.Id)
	return err
}

func (m *defaultCompanyModel) tableName() string {
	return m.table
}
