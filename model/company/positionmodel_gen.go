// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package company

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	positionFieldNames          = builder.RawFieldNames(&Position{})
	positionRows                = strings.Join(positionFieldNames, ",")
	positionRowsExpectAutoSet   = strings.Join(stringx.Remove(positionFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	positionRowsWithPlaceHolder = strings.Join(stringx.Remove(positionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	positionModel interface {
		Insert(ctx context.Context, data *Position) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Position, error)
		Update(ctx context.Context, data *Position) error
		Delete(ctx context.Context, id string) error
	}

	defaultPositionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Position struct {
		Id               string          `db:"id"`                // 职位id
		DepartmentId     string          `db:"department_id"`     // 部门id
		PositionName     string          `db:"position_name"`     // 职位名称
		PositionCode     sql.NullString  `db:"position_code"`     // 职位编码
		JobType          int64           `db:"job_type"`          // 岗位类型 0--专业技术类 1--专业支持类 2--管理类 3--营销类 4--操作类
		PositionLevel    int64           `db:"position_level"`    // 职位级别 1-初级 2-中级 3-高级 4-专家 5-资深专家
		RequiredSkills   sql.NullString  `db:"required_skills"`   // 所需技能标签
		JobDescription   sql.NullString  `db:"job_description"`   // 职位描述
		Responsibilities sql.NullString  `db:"responsibilities"`  // 工作职责
		Requirements     sql.NullString  `db:"requirements"`      // 任职要求
		SalaryRangeMin   sql.NullFloat64 `db:"salary_range_min"`  // 薪资范围最小值
		SalaryRangeMax   sql.NullFloat64 `db:"salary_range_max"`  // 薪资范围最大值
		IsManagement     int64           `db:"is_management"`     // 是否管理岗位 0-否 1-是
		MaxEmployees     int64           `db:"max_employees"`     // 最大员工数量 0-不限制
		CurrentEmployees int64           `db:"current_employees"` // 当前员工数量
		Status           int64           `db:"status"`            // 状态 0-禁用 1-正常
		CreateTime       time.Time       `db:"create_time"`       // 创建时间
		UpdateTime       time.Time       `db:"update_time"`       // 更新时间
		DeleteTime       sql.NullTime    `db:"delete_time"`       // 删除时间
	}
)

func newPositionModel(conn sqlx.SqlConn) *defaultPositionModel {
	return &defaultPositionModel{
		conn:  conn,
		table: "`position`",
	}
}

func (m *defaultPositionModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPositionModel) FindOne(ctx context.Context, id string) (*Position, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", positionRows, m.table)
	var resp Position
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPositionModel) Insert(ctx context.Context, data *Position) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, positionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.DepartmentId, data.PositionName, data.PositionCode, data.JobType, data.PositionLevel, data.RequiredSkills, data.JobDescription, data.Responsibilities, data.Requirements, data.SalaryRangeMin, data.SalaryRangeMax, data.IsManagement, data.MaxEmployees, data.CurrentEmployees, data.Status, data.DeleteTime)
	return ret, err
}

func (m *defaultPositionModel) Update(ctx context.Context, data *Position) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, positionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DepartmentId, data.PositionName, data.PositionCode, data.JobType, data.PositionLevel, data.RequiredSkills, data.JobDescription, data.Responsibilities, data.Requirements, data.SalaryRangeMin, data.SalaryRangeMax, data.IsManagement, data.MaxEmployees, data.CurrentEmployees, data.Status, data.DeleteTime, data.Id)
	return err
}

func (m *defaultPositionModel) tableName() string {
	return m.table
}
